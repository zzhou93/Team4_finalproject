})
spdata  <- st_sfc(USS, crs = usmap_crs()@projargs)
tmp <- data.frame()
for(yr in 2000:2020)
{
tmp <- rbind(tmp, st_sf(data.frame(database %>% filter(year == yr), geometry = spdata)))
}
tmp$centroids <- st_centroid(tmp$geometry)
tmp <- cbind(tmp, do.call(rbind, st_geometry(tmp$centroids)) %>%
as_tibble() %>% setNames(c("lon","lat")))
originplot = ggplot() +
geom_sf(aes(fill = level, alpha = 0.4), color = "white",  data = tmp) +
scale_fill_manual(values = colorvalues, guide = guide_none()) +
theme_void() + theme(legend.position='none', plot.title = element_text(hjust = 0.5))
animateplot = originplot +
geom_text(aes(y = lat, x = lon, label = Value),
colour = "black", size = 4.5, data = tmp) +
geom_text(data = tmp,
aes(x = median(lon), y = min(lat) - abs(max(lat) - min(lat))/4,
label = paste("UR In", State.name, "In", year)),
colour = "black", size = 5) +
transition_states(states = year)
animate(animateplot, renderer = gifski_renderer(), fps = 5, duration = 10)
dim(database)
table(database$year)
d$county %>% unique()
dim(tmp)
tmp %>% data.frame()
USS <- lapply(split(d, d$county), function(x) {
if(length(table(x$piece)) == 1)
{
st_polygon(list(cbind(x$x, x$y)))
}
else
{
st_multipolygon(list(lapply(split(x, x$piece), function(y) cbind(y$x, y$y))))
}
})
spdata  <- st_sfc(USS, crs = usmap_crs()@projargs)
tmp <- data.frame()
for(yr in 2000:2020)
{
tmp <- rbind(tmp, st_sf(data.frame(database %>% filter(year == yr), geometry = spdata)))
}
tmp$centroids <- st_centroid(tmp$geometry)
tmp <- cbind(tmp, do.call(rbind, st_geometry(tmp$centroids)) %>%
as_tibble() %>% setNames(c("lon","lat")))
tmp$lon %>% table()
originplot = ggplot() +
geom_sf(aes(fill = level, alpha = 0.4), color = "white",  data = tmp) +
scale_fill_manual(values = colorvalues, guide = guide_none()) +
theme_void() + theme(legend.position='none', plot.title = element_text(hjust = 0.5))
animateplot = originplot +
geom_text(aes(y = lat, x = lon),
colour = "black", size = 4.5, data = tmp) +
geom_text(data = tmp,
aes(x = median(lon), y = min(lat) - abs(max(lat) - min(lat))/4,
label = paste("UR In", State.name, "In", year)),
colour = "black", size = 5) +
transition_states(states = year)
animate(animateplot, renderer = gifski_renderer(), fps = 5, duration = 10)
originplot = ggplot() +
geom_sf(aes(fill = level, alpha = 0.4), color = "white",  data = tmp) +
scale_fill_manual(values = colorvalues, guide = guide_none()) +
theme_void() + theme(legend.position='none', plot.title = element_text(hjust = 0.5))
animateplot = originplot +
# geom_text(aes(y = lat, x = lon, label = Value),
#           colour = "black", size = 4.5, data = tmp) +
geom_text(data = tmp,
aes(x = median(lon), y = min(lat) - abs(max(lat) - min(lat))/4,
label = paste("UR In", State.name, "In", year)),
colour = "black", size = 5) +
transition_states(states = year)
animate(animateplot, renderer = gifski_renderer(), fps = 5, duration = 10)
tmp$year
state.abb
state.abb[1:8]
state.abb %>% length()
state.abb %>% sort()
plotunemployed_animation(file, "VA")
State.name = "VA"
# summarize unemployment
database <- file %>% filter(Attribute == "Unemployment_rate_") %>%
filter(State == State.name) %>% filter(FIPS_Code %% 1000 != 0) %>%
arrange(Area_name)
database <- database %>%
mutate(level = cut(Value, breaks = c(0, 3, 5, 7, 9, 100),
labels = c("VeryLow", "Low", "Medium", "High", "VeryHigh")))
colorvalues <- c("VeryHigh" = "#ed4747", "High" = "#ffada2", "Medium" = "#cccccc",
"Low" = "#67b5e3", "VeryLow" = "#1155b6", "None" = "#150F0F")
for(yr in 2000:2020)
{
if(State.name == "AK")
{
tmp <- database %>% dplyr::filter(Area_name == "Valdez-Cordova Census Area")
database <- database %>%
add_row(FIPS_Code = NA, State = rep("AK", 2),
Area_name = c("Chugach Census Area", "Copper River Census Area"),
state = "AK", Attribute = rep(database$Attribute[1], 2),
year = rep(yr, 2), Value = NA, level = "None") %>%
dplyr::filter(Area_name != "Valdez-Cordova Census Area")
}
if(State.name == "AK" & yr < 2010)
{
database <- database %>%
add_row(FIPS_Code = NA, State = rep("AK", 2),  year = yr,
Area_name = c("Hoonah-Angoon Census Area","Petersburg Census Area"),
state = rep("AK", 2), Attribute = rep(database$Attribute[1], 2),
Value = NA, level = rep("None", 2))
} else if(State.name == "HI")
{
database <- database %>%
add_row(FIPS_Code = 5005, State = "HI", Area_name = "Kalawao County", year = yr,
state = "HI", Attribute = database$Attribute[1], Value = NA,level = "None")
} else if(State.name == "LA" & yr %in% 2005:2006)
{
database <- database %>%
add_row(FIPS_Code = NA, State = rep("LA", 7), year = rep(yr, 7), state = rep("LA", 7),
Area_name = c("Jefferson", "Orleans", "Plaquemines", "St. Bernard",
"St. Helena", "St. John the Baptist","St. Tammany"),
Attribute = rep(database$Attribute[1], 7),
Value = NA, level = "None")
}
}
database <- database %>% arrange(year, Area_name)
# get map data
rawd <- us_map("counties") %>% filter(abbr == State.name)
if(!State.name %in% c("AK"))
rawd$county <- substr(rawd$county, 1, nchar(rawd$county) - 7)
rawd$group <- rawd$county
d <- rawd %>% arrange(group)
if(State.name == "AK")
{
tmp <- database %>% filter(Area_name == "Valdez-Cordova Census Area")
for(year in 2000:2020)
{
database <- database %>% add_row(FIPS_Code = 2063, State = "AK", Area_name = "Chugach Census Area",
state = "AK", Attribute = database$Attribute[1],
year = year, Value = tmp$Value[year - 1999]) %>%
add_row(FIPS_Code = 2066, State = "AK", Area_name = "Copper River Census Area",
state = "AK", Attribute = database$Attribute[1], year = year, Value = tmp$Value[year - 1999])
if(year < 2010)
{
database <- database %>% add_row(FIPS_Code = 2015, State = "AK", Area_name = "Hoonah-Angoon Census Area",
state = "AK", Attribute = database$Attribute[1], year = year, Value = NA) %>%
add_row(FIPS_Code = 2195, State = "AK", Area_name = "Petersburg Census Area",
state = "AK", Attribute = database$Attribute[1], year = year, Value = NA)
}
}
database <- database %>% filter(Area_name != "Valdez-Cordova Census Area")
}
database <- database %>% arrange(year, Area_name)
USS <- lapply(split(d, d$county), function(x) {
if(length(table(x$piece)) == 1)
{
st_polygon(list(cbind(x$x, x$y)))
}
else
{
st_multipolygon(list(lapply(split(x, x$piece), function(y) cbind(y$x, y$y))))
}
})
spdata  <- st_sfc(USS, crs = usmap_crs()@projargs)
tmp <- data.frame()
for(yr in 2000:2020)
{
tmp <- rbind(tmp, st_sf(data.frame(database %>% filter(year == yr), geometry = spdata)))
}
tmp$centroids <- st_centroid(tmp$geometry)
tmp <- cbind(tmp, do.call(rbind, st_geometry(tmp$centroids)) %>%
as_tibble() %>% setNames(c("lon","lat")))
originplot = ggplot() +
geom_sf(aes(fill = level, alpha = 0.4), color = "white",  data = tmp) +
scale_fill_manual(values = colorvalues, guide = guide_none()) +
theme_void() + theme(legend.position='none', plot.title = element_text(hjust = 0.5))
animateplot = originplot +
geom_text(aes(y = lat, x = lon, label = Value),
colour = "black", size = 4.5, data = tmp) +
geom_text(data = tmp,
aes(x = median(lon), y = min(lat) - abs(max(lat) - min(lat))/4,
label = paste("UR In", State.name, "In", year)),
colour = "black", size = 5) +
transition_states(states = year)
animate(animateplot, renderer = gifski_renderer(), fps = 5, duration = 10)
database <- database %>% filter(year %in% 2015:2020)
USS <- lapply(split(d, d$county), function(x) {
if(length(table(x$piece)) == 1)
{
st_polygon(list(cbind(x$x, x$y)))
}
else
{
st_multipolygon(list(lapply(split(x, x$piece), function(y) cbind(y$x, y$y))))
}
})
spdata  <- st_sfc(USS, crs = usmap_crs()@projargs)
tmp <- data.frame()
for(yr in 2000:2020)
{
tmp <- rbind(tmp, st_sf(data.frame(database %>% filter(year == yr), geometry = spdata)))
}
tmp$centroids <- st_centroid(tmp$geometry)
tmp <- cbind(tmp, do.call(rbind, st_geometry(tmp$centroids)) %>%
as_tibble() %>% setNames(c("lon","lat")))
dim(database)
head(database)
spdata  <- st_sfc(USS, crs = usmap_crs()@projargs)
tmp <- data.frame()
for(yr in 2015:2020)
{
tmp <- rbind(tmp, st_sf(data.frame(database %>% filter(year == yr), geometry = spdata)))
}
tmp$centroids <- st_centroid(tmp$geometry)
tmp <- cbind(tmp, do.call(rbind, st_geometry(tmp$centroids)) %>%
as_tibble() %>% setNames(c("lon","lat")))
originplot = ggplot() +
geom_sf(aes(fill = level, alpha = 0.4), color = "white",  data = tmp) +
scale_fill_manual(values = colorvalues, guide = guide_none()) +
theme_void() + theme(legend.position='none', plot.title = element_text(hjust = 0.5))
animateplot = originplot +
geom_text(aes(y = lat, x = lon, label = Value),
colour = "black", size = 4.5, data = tmp) +
geom_text(data = tmp,
aes(x = median(lon), y = min(lat) - abs(max(lat) - min(lat))/4,
label = paste("UR In", State.name, "In", year)),
colour = "black", size = 5) +
transition_states(states = year)
animate(animateplot, renderer = gifski_renderer(), fps = 5, duration = 10)
tmp <- data.frame()
for(yr in 2015:2020)
{
tmp <- rbind(tmp, st_sf(data.frame(database %>% filter(year == yr) %>% arrange(Area_name),
geometry = spdata)))
}
tmp$centroids <- st_centroid(tmp$geometry)
tmp <- cbind(tmp, do.call(rbind, st_geometry(tmp$centroids)) %>%
as_tibble() %>% setNames(c("lon","lat")))
originplot = ggplot() +
geom_sf(aes(fill = level, alpha = 0.4), color = "white",  data = tmp) +
scale_fill_manual(values = colorvalues, guide = guide_none()) +
theme_void() + theme(legend.position='none', plot.title = element_text(hjust = 0.5))
animateplot = originplot +
geom_text(aes(y = lat, x = lon, label = Value),
colour = "black", size = 4.5, data = tmp) +
geom_text(data = tmp,
aes(x = median(lon), y = min(lat) - abs(max(lat) - min(lat))/4,
label = paste("UR In", State.name, "In", year)),
colour = "black", size = 5) +
transition_states(states = year)
animate(animateplot, renderer = gifski_renderer(), fps = 5, duration = 10)
database <- filter(year %in% 2019:2020)
database <- database %>% filter(year %in% 2019:2020)
for(yr in 2019:2020)
{
tmp <- rbind(tmp, st_sf(data.frame(database %>% filter(year == yr) %>% arrange(Area_name),
geometry = spdata)))
}
tmp <- data.frame()
database <- database %>% filter(year %in% 2019:2020)
for(yr in 2019:2020)
{
tmp <- rbind(tmp, st_sf(data.frame(database %>% filter(year == yr) %>% arrange(Area_name),
geometry = spdata)))
}
tmp$centroids <- st_centroid(tmp$geometry)
tmp <- cbind(tmp, do.call(rbind, st_geometry(tmp$centroids)) %>%
as_tibble() %>% setNames(c("lon","lat")))
originplot = ggplot() +
geom_sf(aes(fill = level, alpha = 0.4), color = "white",  data = tmp) +
scale_fill_manual(values = colorvalues, guide = guide_none()) +
theme_void() + theme(legend.position='none', plot.title = element_text(hjust = 0.5))
animateplot = originplot +
geom_text(aes(y = lat, x = lon, label = Value),
colour = "black", size = 4.5, data = tmp) +
geom_text(data = tmp,
aes(x = median(lon), y = min(lat) - abs(max(lat) - min(lat))/4,
label = paste("UR In", State.name, "In", year)),
colour = "black", size = 5) +
transition_states(states = year)
animate(animateplot, renderer = gifski_renderer(), fps = 5, duration = 10)
table(tmp$year)
State.name
plotunemployed(file, 2018, "VA")
plotunemployed(file, 2005, "VA")
plotunemployed(file, 2006, "VA")
plotunemployed(file, 2007, "VA")
plotunemployed(file, 2008, "VA")
plotunemployed(file, 2009, "VA")
plotunemployed(file, 2010, "VA")
plotunemployed(file, 2011, "VA")
plotunemployed(file, 2012, "VA")
plotunemployed(file, 2013, "VA")
plotunemployed(file, 2014, "VA")
plotunemployed(file, 2015, "VA")
plotunemployed(file, 2016, "VA")
plotunemployed(file, 2017, "VA")
plotunemployed(file, 2019, "VA")
d %>% dim()
d$county %>% table()
d[1,]
dim(database)
# summarize unemployment
database <- file %>% filter(Attribute == "Unemployment_rate_") %>%
filter(State == State.name) %>% filter(FIPS_Code %% 1000 != 0) %>%
arrange(Area_name)
database <- database %>%
mutate(level = cut(Value, breaks = c(0, 3, 5, 7, 9, 100),
labels = c("VeryLow", "Low", "Medium", "High", "VeryHigh")))
colorvalues <- c("VeryHigh" = "#ed4747", "High" = "#ffada2", "Medium" = "#cccccc",
"Low" = "#67b5e3", "VeryLow" = "#1155b6", "None" = "#150F0F")
for(yr in 2000:2020)
{
if(State.name == "AK")
{
tmp <- database %>% dplyr::filter(Area_name == "Valdez-Cordova Census Area")
database <- database %>%
add_row(FIPS_Code = NA, State = rep("AK", 2),
Area_name = c("Chugach Census Area", "Copper River Census Area"),
state = "AK", Attribute = rep(database$Attribute[1], 2),
year = rep(yr, 2), Value = NA, level = "None") %>%
dplyr::filter(Area_name != "Valdez-Cordova Census Area")
}
if(State.name == "AK" & yr < 2010)
{
database <- database %>%
add_row(FIPS_Code = NA, State = rep("AK", 2),  year = yr,
Area_name = c("Hoonah-Angoon Census Area","Petersburg Census Area"),
state = rep("AK", 2), Attribute = rep(database$Attribute[1], 2),
Value = NA, level = rep("None", 2))
} else if(State.name == "HI")
{
database <- database %>%
add_row(FIPS_Code = 5005, State = "HI", Area_name = "Kalawao County", year = yr,
state = "HI", Attribute = database$Attribute[1], Value = NA,level = "None")
} else if(State.name == "LA" & yr %in% 2005:2006)
{
database <- database %>%
add_row(FIPS_Code = NA, State = rep("LA", 7), year = rep(yr, 7), state = rep("LA", 7),
Area_name = c("Jefferson", "Orleans", "Plaquemines", "St. Bernard",
"St. Helena", "St. John the Baptist","St. Tammany"),
Attribute = rep(database$Attribute[1], 7),
Value = NA, level = "None")
}
}
database <- database %>% arrange(year, Area_name)
# get map data
rawd <- us_map("counties") %>% filter(abbr == State.name)
if(!State.name %in% c("AK"))
rawd$county <- substr(rawd$county, 1, nchar(rawd$county) - 7)
rawd$group <- rawd$county
d <- rawd %>% arrange(group)
if(State.name == "AK")
{
tmp <- database %>% filter(Area_name == "Valdez-Cordova Census Area")
for(year in 2000:2020)
{
database <- database %>% add_row(FIPS_Code = 2063, State = "AK", Area_name = "Chugach Census Area",
state = "AK", Attribute = database$Attribute[1],
year = year, Value = tmp$Value[year - 1999]) %>%
add_row(FIPS_Code = 2066, State = "AK", Area_name = "Copper River Census Area",
state = "AK", Attribute = database$Attribute[1], year = year, Value = tmp$Value[year - 1999])
if(year < 2010)
{
database <- database %>% add_row(FIPS_Code = 2015, State = "AK", Area_name = "Hoonah-Angoon Census Area",
state = "AK", Attribute = database$Attribute[1], year = year, Value = NA) %>%
add_row(FIPS_Code = 2195, State = "AK", Area_name = "Petersburg Census Area",
state = "AK", Attribute = database$Attribute[1], year = year, Value = NA)
}
}
database <- database %>% filter(Area_name != "Valdez-Cordova Census Area")
}
database <- database %>% arrange(year, Area_name)
USS <- lapply(split(d, d$county), function(x) {
st_polygon(list(cbind(x$x, x$y)))
}
)
USS <- lapply(split(d, d$county), function(x) {
st_polygon(list(cbind(x$x, x$y)))
}
else
{
st_polygon(list(lapply(split(x, x$piece), function(y) cbind(y$x, y$y)))[[1]])
}
})
USS <- lapply(split(d, d$county), function(x) {
if(length(table(x$piece)) == 1)
{
st_polygon(list(cbind(x$x, x$y)))
}
else
{
st_polygon(list(lapply(split(x, x$piece), function(y) cbind(y$x, y$y)))[[1]])
}
})
spdata  <- st_sfc(USS, crs = usmap_crs()@projargs)
tmp <- data.frame()
for(yr in 2000:2020)
{
tmp <- rbind(tmp, st_sf(data.frame(database %>% filter(year == yr) %>% arrange(Area_name),
geometry = spdata)))
}
tmp$centroids <- st_centroid(tmp$geometry)
tmp <- cbind(tmp, do.call(rbind, st_geometry(tmp$centroids)) %>%
as_tibble() %>% setNames(c("lon","lat")))
originplot = ggplot() +
geom_sf(aes(fill = level, alpha = 0.4), color = "white",  data = tmp) +
scale_fill_manual(values = colorvalues, guide = guide_none()) +
theme_void() + theme(legend.position='none', plot.title = element_text(hjust = 0.5))
animateplot = originplot +
geom_text(aes(y = lat, x = lon, label = Value),
colour = "black", size = 4.5, data = tmp) +
geom_text(data = tmp,
aes(x = median(lon), y = min(lat) - abs(max(lat) - min(lat))/4,
label = paste("UR In", State.name, "In", year)),
colour = "black", size = 5) +
transition_states(states = year)
animate(animateplot, renderer = gifski_renderer(), fps = 5, duration = 10)
dim(tmp)
table(tmp$year)
plotunemployed_animation(file, "VA")
?transition_states
state.abb %>% sort()
#' file=dataclean("https://www.ers.usda.gov/webdocs/DataFiles/48747/Unemployment.csv")
#'
#' plotunemployed_animation(file, "NJ")
#' @author Xiaolan Wan
#' @import sf usmap gifski tibble
#' @importFrom stats median setNames
#' @importFrom gganimate transition_states animate gifski_renderer
#' @importFrom transformr tween_sf
#'
#'
plotunemployed_animation <- function(file, State.name)
{
if(State.name %in% c("AK", "HI", "VA"))
{
print("Do not support animation for this state!")
return()
}
# summarize unemployment
database <- file %>% filter(Attribute == "Unemployment_rate_") %>%
filter(State == State.name) %>% filter(FIPS_Code %% 1000 != 0) %>%
arrange(Area_name)
database <- database %>%
mutate(level = cut(Value, breaks = c(0, 3, 5, 7, 9, 100),
labels = c("VeryLow", "Low", "Medium", "High", "VeryHigh")))
colorvalues <- c("VeryHigh" = "#ed4747", "High" = "#ffada2", "Medium" = "#cccccc",
"Low" = "#67b5e3", "VeryLow" = "#1155b6", "None" = "#150F0F")
for(yr in 2000:2020)
{
if(State.name == "LA" & yr %in% 2005:2006)
{
database <- database %>%
add_row(FIPS_Code = NA, State = rep("LA", 7), year = rep(yr, 7), state = rep("LA", 7),
Area_name = c("Jefferson", "Orleans", "Plaquemines", "St. Bernard",
"St. Helena", "St. John the Baptist","St. Tammany"),
Attribute = rep(database$Attribute[1], 7),
Value = NA, level = "None")
}
}
database <- database %>% arrange(year, Area_name)
# get map data
rawd <- us_map("counties") %>% filter(abbr == State.name)
if(!State.name %in% c("AK"))
rawd$county <- substr(rawd$county, 1, nchar(rawd$county) - 7)
rawd$group <- rawd$county
d <- rawd %>% arrange(group)
database <- database %>% arrange(year, Area_name)
USS <- lapply(split(d, d$county), function(x) {
if(length(table(x$piece)) == 1)
{
st_polygon(list(cbind(x$x, x$y)))
}
else
{
st_multipolygon(list(lapply(split(x, x$piece), function(y) cbind(y$x, y$y))))
}
})
spdata  <- st_sfc(USS, crs = usmap_crs()@projargs)
tmp <- data.frame()
for(yr in 2000:2020)
{
tmp <- rbind(tmp, st_sf(data.frame(database %>% filter(year == yr) %>% arrange(Area_name),
geometry = spdata)))
}
tmp$centroids <- st_centroid(tmp$geometry)
tmp <- cbind(tmp, do.call(rbind, st_geometry(tmp$centroids)) %>%
as_tibble() %>% setNames(c("lon","lat")))
originplot = ggplot() +
geom_sf(aes(fill = level, alpha = 0.4), color = "white",  data = tmp) +
scale_fill_manual(values = colorvalues, guide = guide_none()) +
theme_void() + theme(legend.position='none', plot.title = element_text(hjust = 0.5))
animateplot = originplot +
geom_text(aes(y = lat, x = lon, label = Value),
colour = "black", size = 4.5, data = tmp) +
geom_text(data = tmp,
aes(x = median(lon), y = min(lat) - abs(max(lat) - min(lat))/4,
label = paste("UR In", State.name, "In", year)),
colour = "black", size = 5) +
transition_states(states = year)
animate(animateplot, renderer = gifski_renderer(), fps = 5, duration = 10)
}
plotunemployed_animation(file, "HI")
plotunemployed_animation(file, "LA")
devtools::document()
rm(list = c("plotunemployed", "plotunemployed_animation"))
devtools::document()
devtools::check()
shiny::runApp('inst/shiny-examples/myapp')
devtools::install()
library(unemployedR)
devtools::document()
