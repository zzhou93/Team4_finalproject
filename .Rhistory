Roxygen: list(markdown = TRUE)
roxygen2::Roxygen: list(markdown = TRUE)
Roxygen: list(markdown = TRUE)
Roxygen::list(markdown = TRUE)
devtools::document()
devtools::document()
#' read csv file from USDA site and clean up.
#' @param url the csv file path.
#' @return a map of the chosen shape data.
#' @export
#' @examples
#' dataclean("https://www.ers.usda.gov/webdocs/DataFiles/48747/Unemployment.csv?v=1188.3")
#' @author Zirou Zhou
#' @import tidyverse
dataclean<- function(url){
file=read.csv(url)
file<-separate(file,Attribute,c("Attribute","year"),sep = -4)
file<-separate(file,Area_name,c("Area_name","state"),sep = ",")
file$Area_name <- gsub(" County","", file$Area_name)
file$year=as.numeric(file$year)
}
dataclean("https://www.ers.usda.gov/webdocs/DataFiles/48747/Unemployment.csv")
library(tidyverse)
dataclean("https://www.ers.usda.gov/webdocs/DataFiles/48747/Unemployment.csv")
#' read csv file from USDA site and clean up.
#' @param url the csv file path.
#' @return cleaned data.
#' @export
#' @examples
#' dataclean("https://www.ers.usda.gov/webdocs/DataFiles/48747/Unemployment.csv")
#' @author Zirou Zhou
#' @import tidyverse
dataclean<- function(url){
file=read.csv(url)
file<-separate(file,Attribute,c("Attribute","year"),sep = -4)
file<-separate(file,Area_name,c("Area_name","state"),sep = ",")
file$Area_name <- gsub(" County","", file$Area_name)
file$year=as.numeric(file$year)
return(file)
}
dataclean("https://www.ers.usda.gov/webdocs/DataFiles/48747/Unemployment.csv")
#' read csv file from USDA site and clean up.
#' @param url the csv file path.
#' @return cleaned data.
#' @export
#' @examples
#' dataclean("https://www.ers.usda.gov/webdocs/DataFiles/48747/Unemployment.csv")
#' @author Zirou Zhou
#' @import tidyverse
dataclean<- function(url){
file=read.csv(url)
file<-separate(file,Attribute,c("Attribute","year"),sep = -4)
file<-separate(file,Area_name,c("Area_name","state"),sep = ",")
file$Area_name <- gsub(" County","", file$Area_name)
file$year=as.numeric(file$year)
file
}
dataclean("https://www.ers.usda.gov/webdocs/DataFiles/48747/Unemployment.csv")
file<-dataclean("https://www.ers.usda.gov/webdocs/DataFiles/48747/Unemployment.csv")
devtools::document()
devtools::document()
rm(list = c("dataclean"))
devtools::document()
devtools::document()
#' @param dataset targeted data
#' @return  interactive correlation grah
#' @export
#' @examples
#' chi_pic(dataset)
#' @author Lin Quan
#' @import psych
#' @import reshape2
#' @import ggplot2
#' @import plotly
chi_pic <- function(dataset){
col=dim(dataset)[2]
get_chimat <- function(dataset){
col=dim(dataset)[2]
chimat=matrix(1:col^2, nrow = col, ncol = col)
for (i in 1:col){
for (j in 1:col){
if(dim(table(dataset[,i])) == 2 & dim(table(dataset[,j])) == 2){
temp <-table(dataset[,i], dataset[,j])
chimat[i,j]=phi(temp, digits = 3)
}else {
chimat[i,j]=round(cor(dataset[,i], dataset[,j], method = "pearson"),3)
}
}
}
return(chimat)
}
chimat=get_chimat(dataset)
get_upper_tri <- function(chimat){
chimat[lower.tri(chimat)]<- NA
return(chimat)
}
upper_tri=get_upper_tri(chimat)
diag(upper_tri)=NA
colnames(upper_tri)=colnames(dataset)
rownames(upper_tri)=colnames(dataset)
melted_ut=melt(upper_tri, na.rm = T)
temp_plot <-ggplot(data = melted_ut, aes(x=Var1, y=Var2, fill=value,text = paste(
'variable1: ', Var1,
'<br>variable2: ', Var2,
'<br>correlation: ', value))) + geom_tile() +
geom_text(aes(Var1, Var2, label = value), color = "white", size = 2.5) +
labs(title="") +
theme(
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=10),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.3))
ggplotly(temp_plot, tooltip = "text")
}
chi_pic(file)
View(file)
chi_pic(file[,6:7])
??melt
#' @param dataset targeted data
#' @return  interactive correlation grah
#' @export
#' @examples
#' chi_pic(dataset)
#' @author Lin Quan
#' @import psych
#' @import reshape2
#' @import ggplot2
#' @import plotly
chi_pic <- function(dataset){
col=dim(dataset)[2]
get_chimat <- function(dataset){
col=dim(dataset)[2]
chimat=matrix(1:col^2, nrow = col, ncol = col)
for (i in 1:col){
for (j in 1:col){
if(dim(table(dataset[,i])) == 2 & dim(table(dataset[,j])) == 2){
temp <-table(dataset[,i], dataset[,j])
chimat[i,j]=phi(temp, digits = 3)
}else {
chimat[i,j]=round(cor(dataset[,i], dataset[,j], method = "pearson"),3)
}
}
}
return(chimat)
}
chimat=get_chimat(dataset)
get_upper_tri <- function(chimat){
chimat[lower.tri(chimat)]<- NA
return(chimat)
}
upper_tri=get_upper_tri(chimat)
diag(upper_tri)=NA
colnames(upper_tri)=colnames(dataset)
rownames(upper_tri)=colnames(dataset)
melted_ut=reshape2::melt(upper_tri, na.rm = T)
temp_plot <-ggplot(data = melted_ut, aes(x=Var1, y=Var2, fill=value,text = paste(
'variable1: ', Var1,
'<br>variable2: ', Var2,
'<br>correlation: ', value))) + geom_tile() +
geom_text(aes(Var1, Var2, label = value), color = "white", size = 2.5) +
labs(title="") +
theme(
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=10),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.3))
ggplotly(temp_plot, tooltip = "text")
}
library(psych)
install.packages("psych")
install.packages("reshape2")
install.packages("plotly")
library(reshape2)
library(tidyverse)
library(psych)
library(plotly)
#' @param dataset targeted data
#' @return  interactive correlation grah
#' @export
#' @examples
#' chi_pic(dataset)
#' @author Lin Quan
#' @import psych
#' @import reshape2
#' @import ggplot2
#' @import plotly
chi_pic <- function(dataset){
col=dim(dataset)[2]
get_chimat <- function(dataset){
col=dim(dataset)[2]
chimat=matrix(1:col^2, nrow = col, ncol = col)
for (i in 1:col){
for (j in 1:col){
if(dim(table(dataset[,i])) == 2 & dim(table(dataset[,j])) == 2){
temp <-table(dataset[,i], dataset[,j])
chimat[i,j]=phi(temp, digits = 3)
}else {
chimat[i,j]=round(cor(dataset[,i], dataset[,j], method = "pearson"),3)
}
}
}
return(chimat)
}
chimat=get_chimat(dataset)
get_upper_tri <- function(chimat){
chimat[lower.tri(chimat)]<- NA
return(chimat)
}
upper_tri=get_upper_tri(chimat)
diag(upper_tri)=NA
colnames(upper_tri)=colnames(dataset)
rownames(upper_tri)=colnames(dataset)
melted_ut=reshape2::melt(upper_tri, na.rm = T)
temp_plot <-ggplot(data = melted_ut, aes(x=Var1, y=Var2, fill=value,text = paste(
'variable1: ', Var1,
'<br>variable2: ', Var2,
'<br>correlation: ', value))) + geom_tile() +
geom_text(aes(Var1, Var2, label = value), color = "white", size = 2.5) +
labs(title="") +
theme(
axis.text.x = element_text(angle = 90),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=10),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical")+
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "top", title.hjust = 0.3))
ggplotly(temp_plot, tooltip = "text")
}
chi_pic(file[,6:7])
View(file)
file%>% filter(Attribute=="Unemployed_")%>%
filter(State==State.name)%>%filter(year==yr)%>% filter(!is.na(state))
file%>% filter(Attribute=="Unemployed_")%>%
filter(State=="IA")%>%filter(year==yr)%>% filter(!is.na(state))
file%>% filter(Attribute=="Unemployed_")%>%
filter(State=="IA")%>%filter(year==2000)%>% filter(!is.na(state))
#' read csv file from USDA site and clean up.
#' @param file the file path.
#' @param local.name the chosen state.
#' @return unemployment rate by year
#' @export
#' @examples
#' localunemployrate(file, "Texas")
#' @author Zirou Zhou
#' @import tidyverse
localunemployrate<-function(file,local.name){
if (local.name %in% as.character(levels(as.factor(file$Area_name)))) {
data <- file%>% filter(	Attribute=="Unemployment_rate_")%>%
filter(Area_name %in% c(local.name,"United States"))%>%filter(is.na(state))
}else print("Not a suitable Area name")
}
localunemployrate(file,"Texas")%>%
ggplot(aes(year,Value,color=Area_name))+geom_point()  +geom_line()+
scale_color_discrete("Select state vs US")+
xlab(paste("year"))+ylab("Unemployment rate")
#' read csv file from USDA site and clean up.
#' @param file the file path.
#' @param yr the select year.
#' @param State.name the chosen state.
#' @return top 10 unemployed county histogram
#' @export
#' @examples
#' stateunemployed(file, 2011, "IA")
#' @author Zirou Zhou
#' @import tidyverse
stateunemployed<-function(file, yr, State.name){
if (State.name %in% as.character(levels(as.factor(file$State)))){
database <- file%>% filter(Attribute=="Unemployed_")%>%
filter(State==State.name)%>%filter(year==yr)%>% filter(!is.na(state))%>%
mutate(percent=round(100*Value/sum(Value),2))%>%
mutate(county_percent=paste(Area_name,percent,"%"))%>%
arrange(desc(Value))%>%slice(1:10)
}else  {print("Not a state")}
}
stateunemployrate(file,2011,"IA")%>%
ggplot(aes(x=Area_name,y=Value,fill=county_percent))+geom_col()+
scale_fill_discrete("Percent of Population")+
xlab(paste("Top 10 County of",State.name))+ylab("Population")
stateunemployed(file,2011,"IA")%>%
ggplot(aes(x=Area_name,y=Value,fill=county_percent))+geom_col()+
scale_fill_discrete("Percent of Population")+
xlab(paste("Top 10 County of",State.name))+ylab("Population")
stateunemployed(file,2011,"IA")
stateunemployed(file,2011,"IA")%>%
ggplot(aes(x=Area_name,y=Value,fill=county_percent))+geom_col()+
scale_fill_discrete("Percent of Population")+
xlab(paste("Top 10 County of chosen state"))+ylab("Population")
devtools::document()
devtools::build()
